@page "/contacts"
@inherits BasePage

@using CleanArchitectureSample.Application.Dto.Response
@using System.Net.Http.Json
@using CleanArchitectureSample.Aspire.Web.Model

@attribute [StreamRendering(true)]

@inject ContactApiClient ContactApi
@inject IJSRuntime JS

<PageTitle>Contacts</PageTitle>

<div class="d-flex align-items-center">
    <h1>Contacts</h1>
    <div class="ms-auto">
        <a href="/contact" class="btn btn-primary">Create new</a>
    </div>
</div>


@if (contacts == null)
{
    <div class="loader"></div>
}
else
{
    <div class="container">
        <div class="row sticky-lg-top">
            <div class="col-lg-12 col-md-12">
                <div class="card" style="border-radius: 15px;">
                    <div class="card-header">
                        Search
                    </div>
                    <div class="card-body">
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" placeholder="Search" aria-label="Search" @bind-value="filterText">
                            <div class="input-group-append">
                                <button class="input-group-text" id="btnSearch" ><i class="bi bi-funnel"></i></button>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer"></div>
                </div>
            </div>
            <p></p>
        </div>
        <div class="row">
            @foreach (var item in GetContacts())
            {
                var letterItem = item.Name;
                if (letterItem.Substring(0, 1).ToUpperInvariant() != lastLetter && string.IsNullOrEmpty(filterText))
                {
                    lastLetter = letterItem.Substring(0, 1).ToUpperInvariant();
                    <div class="col-lg-4 col-md-12">
                        <div class="card" style="border-radius: 15px;">
                            <div class="card-header d-flex align-items-center">
                                <h4 class="card-title">@lastLetter</h4>
                            </div>
                            <div class="card-body">
                                <p>@contacts.Where(x => x.Name.Substring(0,1) == lastLetter).Count() contact(s)</p>
                            </div>
                        </div>
                    </div>
                }
                <div class="col-lg-4 col-md-12">
                    <div class="card" style="border-radius: 15px;">
                        <div class="card-header d-flex align-items-center">
                            <h4 class="card-title">
                                <a href="@string.Format("/contact/{0}", item.Id)">
                                    @item.Name @item.LastName
                                </a>
                            </h4>
                            <div class="btn-group btn-group-sm col-sm-3 ml-auto ms-auto">
                                <a class="btn btn-info" href="#">
                                    <i class="bi bi-search-heart"></i>
                                </a>
                                <a class="btn btn-primary" href="@string.Format("/contact/{0}", item.Id)">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                                <a class="btn btn-danger" @onclick="@((e) => DeleteContactAsync(item))">
                                    <i class="bi bi-trash"></i>
                                </a>
                            </div>
                        </div>
                        <div class="card-body">
                            <a href="@string.Format("mailto:{0}", item.Email)">
                                <i class="bi bi-envelope"></i> @item.Email
                            </a>
                            <p><i class="bi bi-telephone"></i> @item.Phone</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    public ContactModel[]? contacts;

    private string lastLetter = "";
    private string filterText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        contacts = await ContactApi.GetContactsAsync();
    }

    private ContactModel[] GetContacts()
    {
        if (contacts is null)
            return [];

        ContactModel[] retVal;

        if (!string.IsNullOrEmpty(filterText))
        {
            retVal = contacts
                .Where(x => x.Name.Contains(filterText, StringComparison.InvariantCultureIgnoreCase) ||
                    x.LastName.Contains(filterText, StringComparison.InvariantCultureIgnoreCase) ||
                    (x.Email ?? "").Contains(filterText, StringComparison.InvariantCultureIgnoreCase) ||
                    (x.Phone ?? "").Contains(filterText, StringComparison.InvariantCultureIgnoreCase))
                .OrderBy(x => x.Name)
                .ToArray();
        }
        else
        {
            retVal = contacts;
        }

        return retVal.OrderBy(x => x.Name).ToArray();
    }

    private void OnFilter()
    => StateHasChanged();

    private async Task DeleteContactAsync(ContactModel contact)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Delete contact {contact.Name} {contact.LastName} ?");
        if (confirmed)
        {
            var response = await ContactApi.DeleteContactAsync(contact.Id.Value);
            if (string.IsNullOrEmpty(response))
                contacts = contacts?.Where(x => x.Id != contact?.Id).ToArray();
        }
    }
}
