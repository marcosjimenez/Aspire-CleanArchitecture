@inherits BasePage
@page "/contact/{contactId:int?}"
@using CleanArchitectureSample.Application.Dto.Response
@using System.Net.Http.Json
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Model
@attribute [StreamRendering(true)]

@inject ContactApiClient ContactApi

<PageTitle>Edit Contact</PageTitle>

<h1>Contact</h1>

@if (countries == null)
{
    <div class="loader"></div>
}
else
{

    <EditForm Model="@contact" class="flex-fill">
        <div class="form-row">
            <div class="col">
                <label for="id" class="col-sm-2 col-form-label">
                    Id
                </label>
                <input type="text" class="form-control" placeholder="Id" @bind-value="@contact.Id" readonly>
            </div>
            <div class="col">
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <label for="name" class="col-sm-2 col-form-label">
                    Name
                </label>
                <input id="name" type="text" class="form-control" placeholder="First name" @bind-value="@contact.Name">
            </div>
            <div class="col">
                <label for="lastname" class="col-sm-2 col-form-label">
                    LastName
                </label>
                <input id="lastname" type="text" class="form-control" placeholder="Last name" @bind-value="@contact.LastName">
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <label for="phone" class="col-sm-2 col-form-label">
                    Phone
                </label>
                <input id="phone" type="tel" class="form-control" placeholder="Phone" @bind-value="@contact.Phone">
            </div>
            <div class="col">
                <label for="email" class="col-sm-2 col-form-label">
                    Email
                </label>
                <input type="email" class="form-control" placeholder="Email" @bind-value="@contact.Email">
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <label for="birthdate" class="col-sm-2 col-form-label">
                    Bith Date
                </label>
                <input id="birthdate" type="date" class="form-control" placeholder="Birth Date" @bind-value="@contact.BirthDate">
            </div>
            <div class="col">
                <label for="countries">Country</label>
                @if (countries is not null)
                {
                    <InputSelect id="countries" @bind-Value="contact.CountryId" class="form-control">
                    @foreach (var country in countries.OrderBy(x => x.Name))
                    {
                        <option value="@country.Id">@country.Name</option>
                    }
                    </InputSelect>
                }
            </div>
        </div>
        <div class="form-row">
            <p></p>
        </div>
        <div class="form-row">
            <div class="d-flex flex-row-reverse">
                <button type="button" class="btn btn-primary btn-lg" @onclick="OnSave">Save</button>
                <a href="/contacts" class="btn btn-danger btn-lg" role="button" aria-disabled="true">Cancel</a>
            </div>
        </div>

    </EditForm>
}

@code {
    string[] errors = { };
    bool success;

    [Parameter]
    public int? ContactId { get; set; }

    public ContactModel contact = new ContactModel();
    public IEnumerable<CountryResponse>? countries;

    protected override async Task OnInitializedAsync()
    {
        contact = ContactId.HasValue ?
        await ContactApi.GetContactAsync(ContactId.Value) :
        new ContactModel();

        countries = await ContactApi.GetCountriesAsync();
    }

    async Task OnSave()
    {
        try
        {
            if (contact.Id.HasValue)
                contact = await ContactApi.UpdateContactAsync(contact);
            else
                contact = await ContactApi.CreateContactAsync(contact);

            // Snackbar.Add("Contact saved", Severity.Info, config => { config.ShowCloseIcon = true; });
            NavigationManager.NavigateTo($"/contacts", true);
        }
        catch(Exception ex)
        {
            // Snackbar.Add(ex.Message, Severity.Error, config => { config.ShowCloseIcon = true; });
        }

    }

}